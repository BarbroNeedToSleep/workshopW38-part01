package se.lexicon.workshopweek38part01.repo;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.domain.EntityScan;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;

import org.springframework.test.context.ActiveProfiles;
import se.lexicon.workshopweek38part01.entity.AppUser;
import se.lexicon.workshopweek38part01.entity.Details;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;

@DataJpaTest
@EntityScan("se.lexicon.workshopweek38part01.entity")
@ActiveProfiles("test")

class AppUserRepositoryTest {

    @Autowired
    private AppUserRepository appUserRepository;

    @Test
    void findByUsername() {
        Details details = Details.builder()
                .email("john@example.com")
                .name("John Doe")
                .birthDate(LocalDate.of(1990, 1, 1))
                .build();

        AppUser user = new AppUser("john", "pass123", details);
        appUserRepository.save(user);

        Optional<AppUser> found = appUserRepository.findByUsername("john");
        assertTrue(found.isPresent());
        assertEquals("john", found.get().getUsername());
    }

    @Test
    void findByRegDateBetween() {
        // Create Details object
        Details details = Details.builder()
                .email("jane@example.com")
                .name("Jane Doe")
                .birthDate(LocalDate.of(1992, 5, 10))
                .build();

        // Create and save AppUser â€” regDate will be set automatically
        AppUser user = new AppUser("jane", "pass456", details);
        appUserRepository.save(user);

        // Capture the regDate that was auto-set
        LocalDate regDate = user.getRegDate();

        // Query users created "around today"
        List<AppUser> users = appUserRepository.findByRegDateBetween(
                regDate.minusDays(1),
                regDate.plusDays(1)
        );

        assertFalse(users.isEmpty());
        assertTrue(users.stream().anyMatch(u -> u.getUsername().equals("jane")));
    }


    @Test
    void findByUserDetails_Id() {
        Details details = Details.builder()
                .email("mike@example.com")
                .name("Mike Smith")
                .birthDate(LocalDate.of(1985, 3, 20))
                .build();

        AppUser user = new AppUser("mike", "pass789", details);
        appUserRepository.save(user);

        // Get the ID AFTER saving (generated by H2)
        Integer detailsId = user.getUserDetails().getId();

        Optional<AppUser> found = appUserRepository.findByUserDetails_Id(detailsId);
        assertTrue(found.isPresent());
        assertEquals("mike", found.get().getUsername());
    }

    @Test
    void findByUserDetails_EmailIgnoreCase() {
        Details details = Details.builder()
                .email("sara@example.com")
                .name("Sara Connor")
                .birthDate(LocalDate.of(1995, 7, 15))
                .build();

        AppUser user = new AppUser("sara", "pass321", details);
        appUserRepository.save(user);

        Optional<AppUser> found = appUserRepository.findByUserDetails_EmailIgnoreCase("SARA@EXAMPLE.COM");
        assertTrue(found.isPresent());
        assertEquals("sara", found.get().getUsername());
    }
}
